plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

  // Step 2: Add required dependencies
  // The OpenTelemetry BOM (bill of materials) coordinates artifact versions
  implementation platform('io.opentelemetry:opentelemetry-bom:1.10.1')
  implementation platform('io.opentelemetry:opentelemetry-bom-alpha:1.10.1-alpha')
  // The OpenTelemetry API provides APIs for instrumenting applications
  implementation 'io.opentelemetry:opentelemetry-api'
  // The OpenTelemetry SDK provides APIs configuring what happens with telemetry data
  implementation 'io.opentelemetry:opentelemetry-sdk'
  // The Autoconfigure module allows the SDK to be configured via system properties / environment variables
  implementation 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure'
  // The OTLP exporters are the standard way to export telemetry data out of the application
  implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
  implementation 'io.opentelemetry:opentelemetry-exporter-otlp-metrics'

  // The OpenTelemetry Instrumentation BOM coordinates artifact versions for instrumentation code
  implementation platform('io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.10.0-alpha')
  // OpenTelemetry runtime metrics provides instrumentation for JVM memory usage and garbage collection
  implementation 'io.opentelemetry.instrumentation:opentelemetry-runtime-metrics'
  // OpenTelemetry Spring WebMVC provides a servlet filter for instrumenting Spring WebMVC applications
  implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-3.1'
}

test {
	useJUnitPlatform()
}
