plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.4.6'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'de.undercouch.download' version '4.1.1'
}

def agentPath = project.buildDir.toString() + "/otel/opentelemetry-javaagent-all-${project['otel-agent.version']}.jar"

bootRun {
    mainClass.set 'com.newrelic.app.Application'

    // Before running, build the otel-intializer shadow jar
    dependsOn(":agent-nr-config:otel-initializer:shadowJar")
    // Before running, download the opentelemetry-java-instrumentation agent
    dependsOn("downloadAgent")

    def initializerPath = project(":agent-nr-config:otel-initializer").buildDir.toString() + "/libs/otel-initializer.jar"

    jvmArgs = [
            // Set the opentelemetry-java-instrumentation agent as the javaagent
            "-javaagent:${agentPath}",
            // Use the otel-initializer shadowJar to configure the agent via SPI
            "-Dotel.javaagent.experimental.initializer.jar=${initializerPath}"
    ]
}

// Download the opentelemetry java agent and put it in the build directory
task downloadAgent(type: Download) {
    src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v${project['otel-agent.version']}/opentelemetry-javaagent-all.jar"
    dest agentPath
    overwrite false
}

configurations.all {
    exclude module: 'spring-boot-starter-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'io.opentelemetry:opentelemetry-api'
    implementation 'io.opentelemetry:opentelemetry-api-metrics'
}