apiVersion: v1
kind: ConfigMap
metadata:
  name: opentelemetry-demo-otelcol
  labels:
    app.kubernetes.io/name: otelcol
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/version: "0.82.0"
data:
  relay: |
    connectors:
      spanmetrics: null
    exporters:
      logging:
        verbosity: detailed
      otlphttp:
        endpoint: https://otlp.nr-data.net:4318
        headers:
          api-key: #NEW_RELIC_API_KEY
          insecure: true
      prometheus:
        enable_open_metrics: true
        endpoint: ${env.MY_POD_IP}:9464
        resource_to_telemetry_conversion:
          enabled: true
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40
    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800
      filter/ottl:
        error_mode: ignore
        metrics:
          metric:
          - name == "rpc.server.duration"
      resourcedetection/env:
        detectors: ["env", "system"]
        override: false
        system:
          hostname_sources: ["os"]
          resource_attributes:
            host.id:
              enabled: true
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
          - k8s.container.name
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - key: host.id
          from_attribute: host.name
          action: upsert
        # TODO (chris): Upsert only when cluster name not found (resource detection override: true)
        - key: k8s.cluster.name
          action: upsert
          value: "otel-demo"
        - key: newrelicOnly
          action: upsert
          value: 'true'
        - key: k8s.container.name
          action: upsert
          from_attribute: service.name
      transform:
        metric_statements:
        - context: metric
          statements:
          - set(description, "") where name == "queueSize"
          - set(description, "") where name == "rpc.server.duration"
          - set(description, "") where name == "http.client.duration"

      resourcedetection:
        detectors: ["env", "system"]
        system:
          hostname_sources: ["os"]
          resource_attributes:
            host.id:
              enabled: true

      resourcedetection/cloud:
        detectors: ["gcp", "ec2", "azure"]
        timeout: 2s
        ec2:
          resource_attributes:
            host.name:
              enabled: false
      # attributes/self:
      #   actions:
      #     - key: k8s.pod.name
      #       action: update
      #       from_attribute: pod
      #     - key: k8s.deployment.name
      #       action: update
      #       from_attribute: deployment
      #     - key: k8s.node.name
      #       action: update
      #       from_attribute: node
      #     - key: k8s.namespace.name
      #       action: upsert
      #       from_attribute: namespace

    receivers:
      httpcheck/frontendproxy:
        targets:
        - endpoint: http://opentelemetry-demo-frontendproxy:8080
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
            metric_relabel_configs:
            - action: labeldrop
              regex: "service_instance_id|service_name|http_scheme|net_host_port"
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      - memory_ballast
      pipelines:
        logs:
          exporters:
          - logging
          processors:
          - k8sattributes
          - memory_limiter
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlphttp
          - prometheus
          - logging
          processors:
          - resourcedetection
          - resourcedetection/env
          - resourcedetection/cloud
          - k8sattributes
          # - attributes/self
          - memory_limiter
          - filter/ottl
          - transform
          - resource
          - batch
          receivers:
          - otlp
          - prometheus
          - spanmetrics
          - httpcheck/frontendproxy
        traces:
          exporters:
          - otlphttp
          - logging
          - spanmetrics
          processors:
          - k8sattributes
          # - attributes/self
          - memory_limiter
          - resource
          - batch
          receivers:
          - otlp
          - jaeger
          - zipkin
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888