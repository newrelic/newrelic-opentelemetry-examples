apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: opentelemetry-demo
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      k8sattributes:
      k8sattributes/2:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          # only retrieve pods running on the same node as the collector
          node_from_env_var: KUBE_NODE_NAME
        extract:
          # The attributes provided in 'metadata' will be added to associated resources
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.start_time
            - k8s.container.name
          labels:
          # This label extraction rule takes the value 'app.kubernetes.io/component' label and maps it to the 'app.label.component' attribute which will be added to the associated resources
          - tag_name: app.label.component
            key: app.kubernetes.io/component
            from: pod
        pod_association:
          - sources:
              # This rule associates all resources containing the 'k8s.pod.ip' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              # This rule associates all resources containing the 'k8s.pod.uid' attribute with the matching pods. If this attribute is not present in the resource, this rule will not be able to find the matching pod.
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              # This rule will use the IP from the incoming connection from which the resource is received, and find the matching pod, based on the 'pod.status.podIP' of the observed pods
              - from: connection
      resource:
        attributes:
        - key: host.id
          from_attribute: host.name
          action: upsert
        # TODO (chris): Upsert only when cluster name not found (resource detection override: true)
        - key: k8s.cluster.name
          action: upsert
          value: "opentelemetry-demo"
        - key: k8s.container.name
          action: upsert
          from_attribute: service.name
  
    exporters:
      logging:
        loglevel: debug
      otlphttp:
        endpoint: "https://otlp.nr-data.net"
        headers:
          api-key: "d0ae0c111dc8da46a1305d168ef4d692FFFFNRAL"

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [k8sattributes,resource]
          exporters: [logging, otlphttp]
        metrics:
          receivers: [otlp]
          processors: [k8sattributes,resource]
          exporters: [logging, otlphttp]