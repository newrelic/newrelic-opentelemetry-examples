default:
  # List of environment variables applied to all components
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: NODE_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.hostIP
    - name: OTEL_K8S_CLUSTER_NAME
      value: opentelemetry-demo
    - name: OTEL_COLLECTOR_NAME
      value: '{{ include "otel-demo.name" . }}-otelcol'
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: delta
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: >-
        service.name=$(OTEL_SERVICE_NAME),
        service.namespace=opentelemetry-demo,
        service.version={{ .Chart.AppVersion }}
        service.instance.id=$(OTEL_K8S_POD_NAME),
        k8s.pod.uid=$(OTEL_K8S_POD_UID),
        k8s.node.name=$(OTEL_K8S_NODE_NAME),
        k8s.pod.name=$(OTEL_K8S_POD_NAME),
        k8s.cluster.name=$(OTEL_K8S_CLUSTER_NAME),
        k8s.container.name=$(OTEL_SERVICE_NAME),
  # Allows overriding and additions to .Values.default.env
  envOverrides: []
  #  - name: OTEL_K8S_NODE_NAME
  #    value: "someConstantValue"
  image:
    repository: ghcr.io/open-telemetry/demo
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: "1.11.0"
    pullPolicy: IfNotPresent
    pullSecrets: []
  # Default # of replicas for all components
  replicas: 1
  # Default schedulingRules for all components
  schedulingRules:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  # Default securityContext for all components
  securityContext: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

components:

  adService:
    enabled: true
    useDefault:
      env: true
    service:
      port: 8080
    env:
      - name: AD_SERVICE_PORT
        value: "8080"
      - name: FLAGD_HOST
        value: '{{ include "otel-demo.name" . }}-flagd'
      - name: FLAGD_PORT
        value: "8013"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://$(OTEL_COLLECTOR_NAME):4318
      - name: OTEL_LOGS_EXPORTER
        value: otlp
    resources:
      limits:
        memory: 300Mi

opentelemetry-collector:
  image:
    repository: "otel/opentelemetry-collector-contrib"
  enabled: true
  nameOverride: otelcol
  mode: deployment
  presets:
    kubernetesAttributes:
      enabled: true
  resources:
    limits:
      memory: 250Mi
  service:
    type: ClusterIP
  ports:
    metrics:
      enabled: true
  podAnnotations:
    opentelemetry_community_demo: "true"
  config:
    receivers:
      otlp:
        protocols:
          http:
            # Since this collector needs to receive data from the web, enable cors for all origins
            # `allowed_origins` can be refined for your deployment domain
            cors:
              allowed_origins:
                - "http://*"
                - "https://*"

    exporters:
      otlphttp/newrelic:
        endpoint: "https://otlp.nr-data.net:4317"
        tls:
          insecure: false
        headers:
          api-key: ${NEW_RELIC_LICENSE_KEY}
      # Create an exporter to Prometheus (metrics)
    processors:
      resourcedetection:
        detectors: [env]
      resource:
        attributes:
        - key: service.instance.id
          from_attribute: k8s.pod.uid
          action: insert

    # connectors:
    #   spanmetrics: {}

    service:
      pipelines:
        traces:
          processors: [memory_limiter, resource, resourcedetection, batch]
          exporters: [otlphttp/newrelic, debug]
          # exporters: [otlp, debug, spanmetrics]
        metrics:
          # receivers: [httpcheck/frontendproxy, redis, otlp, spanmetrics]
          receivers: [httpcheck/frontendproxy, redis, otlp]
          processors: [memory_limiter, resource, resourcedetection, batch]
          exporters: [otlphttp/newrelic, debug]
          # exporters: [otlphttp/prometheus, debug]
        logs:
          processors: [memory_limiter, resource,resourcedetection, batch]
          exporters: [otlphttp/newrelic, debug]
          # exporters: [opensearch, debug]

  extraEnvs:
    - name: NEW_RELIC_LICENSE_KEY
      valueFrom:
        secretKeyRef:
          name: newrelic-license-key
          key: license-key
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: "delta"
